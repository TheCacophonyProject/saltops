# Set the maximum (and minimum) frequency of the CPU
arm_freq=600
arm_freq_min=600

# Set the maximum (and minimum) frequency of the GPU
gpu_freq=200
gpu_freq_min=200

# Enable the I2C interface
dtparam=i2c_arm=on,i2c_arm_baudrate=100000

# Enable SPI and set GPIO 8 as the CS pin for the SPI interface.
dtparam=spi=on
dtoverlay=spi0-1cs,cs0_pin=8

# Disable Bluetooth to free up a UART to program the attiny1616
dtoverlay=disable-bt
dtoverlay=pi3-disable-bt
enable_uart=1

# Enable audio (loads snd_bcm2835)
#dtparam=audio=on

# Run in 64-bit mode
arm_64bit=1

# Allocate 16 MB of memory to the GPU. 
# This leaves more RAM available for the CPU, at the cost of GPU performance.
gpu_mem=16

# Sets a pin low when the RPi has finished shutting down. The ATtiny will need to power off the 5V after this triggers,
# failure to do so results in a kernel BUG, increased power consumption and undefined behaviour.
# An unwanted behaviour is that when running a reboot command on the RPi it won't be able to reboot properly.
# Because of that the ATtiny needs to recognize and reboot the RPi by powering it off then on when this pin triggers.
# The reason this is set is to:
# - Disabled the wake from GPIO3, so the RP2040 running I2C commands won't wake up the RPi.
# - Faster and safer power off sequences, rather than the ATtiny waiting a fix amount of time to cut power it knows when it is safe to do so.
dtoverlay=gpio-poweroff,gpiopin=27,active_low=1
